// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#ifndef PROTOBUF_result_2eproto__INCLUDED
#define PROTOBUF_result_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace argos {
namespace serialization {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_result_2eproto();
void protobuf_AssignDesc_result_2eproto();
void protobuf_ShutdownFile_result_2eproto();

class GeoLocation;
class Array;
class Array_SimpleValue;
class Value;
class Histogram;
class Histogram_Entry;
class Histograms;
class Document;
class Schema;
class Result;

// ===================================================================

class GeoLocation : public ::google::protobuf::Message {
 public:
  GeoLocation();
  virtual ~GeoLocation();
  
  GeoLocation(const GeoLocation& from);
  
  inline GeoLocation& operator=(const GeoLocation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoLocation& default_instance();
  
  void Swap(GeoLocation* other);
  
  // implements Message ----------------------------------------------
  
  GeoLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeoLocation& from);
  void MergeFrom(const GeoLocation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline float latitude() const;
  inline void set_latitude(float value);
  
  // required float longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline float longitude() const;
  inline void set_longitude(float value);
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.GeoLocation)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float latitude_;
  float longitude_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static GeoLocation* default_instance_;
};
// -------------------------------------------------------------------

class Array_SimpleValue : public ::google::protobuf::Message {
 public:
  Array_SimpleValue();
  virtual ~Array_SimpleValue();
  
  Array_SimpleValue(const Array_SimpleValue& from);
  
  inline Array_SimpleValue& operator=(const Array_SimpleValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Array_SimpleValue& default_instance();
  
  void Swap(Array_SimpleValue* other);
  
  // implements Message ----------------------------------------------
  
  Array_SimpleValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Array_SimpleValue& from);
  void MergeFrom(const Array_SimpleValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::int64 number() const;
  inline void set_number(::google::protobuf::int64 value);
  
  // optional double dnumber = 2;
  inline bool has_dnumber() const;
  inline void clear_dnumber();
  static const int kDnumberFieldNumber = 2;
  inline double dnumber() const;
  inline void set_dnumber(double value);
  
  // optional .argos.serialization.protobuf.GeoLocation geoloc = 3;
  inline bool has_geoloc() const;
  inline void clear_geoloc();
  static const int kGeolocFieldNumber = 3;
  inline const ::argos::serialization::protobuf::GeoLocation& geoloc() const;
  inline ::argos::serialization::protobuf::GeoLocation* mutable_geoloc();
  inline ::argos::serialization::protobuf::GeoLocation* release_geoloc();
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Array.SimpleValue)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_dnumber();
  inline void clear_has_dnumber();
  inline void set_has_geoloc();
  inline void clear_has_geoloc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 number_;
  double dnumber_;
  ::argos::serialization::protobuf::GeoLocation* geoloc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Array_SimpleValue* default_instance_;
};
// -------------------------------------------------------------------

class Array : public ::google::protobuf::Message {
 public:
  Array();
  virtual ~Array();
  
  Array(const Array& from);
  
  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Array& default_instance();
  
  void Swap(Array* other);
  
  // implements Message ----------------------------------------------
  
  Array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Array_SimpleValue SimpleValue;
  
  // accessors -------------------------------------------------------
  
  // repeated .argos.serialization.protobuf.Array.SimpleValue element = 1;
  inline int element_size() const;
  inline void clear_element();
  static const int kElementFieldNumber = 1;
  inline const ::argos::serialization::protobuf::Array_SimpleValue& element(int index) const;
  inline ::argos::serialization::protobuf::Array_SimpleValue* mutable_element(int index);
  inline ::argos::serialization::protobuf::Array_SimpleValue* add_element();
  inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Array_SimpleValue >&
      element() const;
  inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Array_SimpleValue >*
      mutable_element();
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Array)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Array_SimpleValue > element_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Array* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();
  
  Value(const Value& from);
  
  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();
  
  void Swap(Value* other);
  
  // implements Message ----------------------------------------------
  
  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::int64 number() const;
  inline void set_number(::google::protobuf::int64 value);
  
  // optional double dnumber = 2;
  inline bool has_dnumber() const;
  inline void clear_dnumber();
  static const int kDnumberFieldNumber = 2;
  inline double dnumber() const;
  inline void set_dnumber(double value);
  
  // optional .argos.serialization.protobuf.GeoLocation geoloc = 3;
  inline bool has_geoloc() const;
  inline void clear_geoloc();
  static const int kGeolocFieldNumber = 3;
  inline const ::argos::serialization::protobuf::GeoLocation& geoloc() const;
  inline ::argos::serialization::protobuf::GeoLocation* mutable_geoloc();
  inline ::argos::serialization::protobuf::GeoLocation* release_geoloc();
  
  // optional string str = 4;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 4;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // optional .argos.serialization.protobuf.Array array = 5;
  inline bool has_array() const;
  inline void clear_array();
  static const int kArrayFieldNumber = 5;
  inline const ::argos::serialization::protobuf::Array& array() const;
  inline ::argos::serialization::protobuf::Array* mutable_array();
  inline ::argos::serialization::protobuf::Array* release_array();
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Value)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_dnumber();
  inline void clear_has_dnumber();
  inline void set_has_geoloc();
  inline void clear_has_geoloc();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_array();
  inline void clear_has_array();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 number_;
  double dnumber_;
  ::argos::serialization::protobuf::GeoLocation* geoloc_;
  ::std::string* str_;
  ::argos::serialization::protobuf::Array* array_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class Histogram_Entry : public ::google::protobuf::Message {
 public:
  Histogram_Entry();
  virtual ~Histogram_Entry();
  
  Histogram_Entry(const Histogram_Entry& from);
  
  inline Histogram_Entry& operator=(const Histogram_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Histogram_Entry& default_instance();
  
  void Swap(Histogram_Entry* other);
  
  // implements Message ----------------------------------------------
  
  Histogram_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Histogram_Entry& from);
  void MergeFrom(const Histogram_Entry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .argos.serialization.protobuf.Value key = 1;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::argos::serialization::protobuf::Value& key(int index) const;
  inline ::argos::serialization::protobuf::Value* mutable_key(int index);
  inline ::argos::serialization::protobuf::Value* add_key();
  inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value >&
      key() const;
  inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value >*
      mutable_key();
  
  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Histogram.Entry)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value > key_;
  ::google::protobuf::uint32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Histogram_Entry* default_instance_;
};
// -------------------------------------------------------------------

class Histogram : public ::google::protobuf::Message {
 public:
  Histogram();
  virtual ~Histogram();
  
  Histogram(const Histogram& from);
  
  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Histogram& default_instance();
  
  void Swap(Histogram* other);
  
  // implements Message ----------------------------------------------
  
  Histogram* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Histogram& from);
  void MergeFrom(const Histogram& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Histogram_Entry Entry;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .argos.serialization.protobuf.Histogram.Entry entry = 2;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 2;
  inline const ::argos::serialization::protobuf::Histogram_Entry& entry(int index) const;
  inline ::argos::serialization::protobuf::Histogram_Entry* mutable_entry(int index);
  inline ::argos::serialization::protobuf::Histogram_Entry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram_Entry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram_Entry >*
      mutable_entry();
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Histogram)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram_Entry > entry_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Histogram* default_instance_;
};
// -------------------------------------------------------------------

class Histograms : public ::google::protobuf::Message {
 public:
  Histograms();
  virtual ~Histograms();
  
  Histograms(const Histograms& from);
  
  inline Histograms& operator=(const Histograms& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Histograms& default_instance();
  
  void Swap(Histograms* other);
  
  // implements Message ----------------------------------------------
  
  Histograms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Histograms& from);
  void MergeFrom(const Histograms& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .argos.serialization.protobuf.Histogram histogram = 1;
  inline int histogram_size() const;
  inline void clear_histogram();
  static const int kHistogramFieldNumber = 1;
  inline const ::argos::serialization::protobuf::Histogram& histogram(int index) const;
  inline ::argos::serialization::protobuf::Histogram* mutable_histogram(int index);
  inline ::argos::serialization::protobuf::Histogram* add_histogram();
  inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram >&
      histogram() const;
  inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram >*
      mutable_histogram();
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Histograms)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram > histogram_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Histograms* default_instance_;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message {
 public:
  Document();
  virtual ~Document();
  
  Document(const Document& from);
  
  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();
  
  void Swap(Document* other);
  
  // implements Message ----------------------------------------------
  
  Document* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .argos.serialization.protobuf.Value field = 1;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::argos::serialization::protobuf::Value& field(int index) const;
  inline ::argos::serialization::protobuf::Value* mutable_field(int index);
  inline ::argos::serialization::protobuf::Value* add_field();
  inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value >&
      field() const;
  inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value >*
      mutable_field();
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Document)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value > field_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Document* default_instance_;
};
// -------------------------------------------------------------------

class Schema : public ::google::protobuf::Message {
 public:
  Schema();
  virtual ~Schema();
  
  Schema(const Schema& from);
  
  inline Schema& operator=(const Schema& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Schema& default_instance();
  
  void Swap(Schema* other);
  
  // implements Message ----------------------------------------------
  
  Schema* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Schema& from);
  void MergeFrom(const Schema& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string field = 1;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::std::string& field(int index) const;
  inline ::std::string* mutable_field(int index);
  inline void set_field(int index, const ::std::string& value);
  inline void set_field(int index, const char* value);
  inline void set_field(int index, const char* value, size_t size);
  inline ::std::string* add_field();
  inline void add_field(const ::std::string& value);
  inline void add_field(const char* value);
  inline void add_field(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& field() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_field();
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Schema)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> field_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Schema* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();
  
  Result(const Result& from);
  
  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();
  
  void Swap(Result* other);
  
  // implements Message ----------------------------------------------
  
  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 total = 1;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 1;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);
  
  // required uint32 returned = 2;
  inline bool has_returned() const;
  inline void clear_returned();
  static const int kReturnedFieldNumber = 2;
  inline ::google::protobuf::uint32 returned() const;
  inline void set_returned(::google::protobuf::uint32 value);
  
  // required .argos.serialization.protobuf.Schema schema = 3;
  inline bool has_schema() const;
  inline void clear_schema();
  static const int kSchemaFieldNumber = 3;
  inline const ::argos::serialization::protobuf::Schema& schema() const;
  inline ::argos::serialization::protobuf::Schema* mutable_schema();
  inline ::argos::serialization::protobuf::Schema* release_schema();
  
  // repeated .argos.serialization.protobuf.Document document = 4;
  inline int document_size() const;
  inline void clear_document();
  static const int kDocumentFieldNumber = 4;
  inline const ::argos::serialization::protobuf::Document& document(int index) const;
  inline ::argos::serialization::protobuf::Document* mutable_document(int index);
  inline ::argos::serialization::protobuf::Document* add_document();
  inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Document >&
      document() const;
  inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Document >*
      mutable_document();
  
  // optional .argos.serialization.protobuf.Histograms histograms = 5;
  inline bool has_histograms() const;
  inline void clear_histograms();
  static const int kHistogramsFieldNumber = 5;
  inline const ::argos::serialization::protobuf::Histograms& histograms() const;
  inline ::argos::serialization::protobuf::Histograms* mutable_histograms();
  inline ::argos::serialization::protobuf::Histograms* release_histograms();
  
  // @@protoc_insertion_point(class_scope:argos.serialization.protobuf.Result)
 private:
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_returned();
  inline void clear_has_returned();
  inline void set_has_schema();
  inline void clear_has_schema();
  inline void set_has_histograms();
  inline void clear_has_histograms();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 total_;
  ::google::protobuf::uint32 returned_;
  ::argos::serialization::protobuf::Schema* schema_;
  ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Document > document_;
  ::argos::serialization::protobuf::Histograms* histograms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_2eproto();
  friend void protobuf_AssignDesc_result_2eproto();
  friend void protobuf_ShutdownFile_result_2eproto();
  
  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// GeoLocation

// required float latitude = 1;
inline bool GeoLocation::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoLocation::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoLocation::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoLocation::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float GeoLocation::latitude() const {
  return latitude_;
}
inline void GeoLocation::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
}

// required float longitude = 2;
inline bool GeoLocation::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoLocation::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoLocation::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoLocation::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float GeoLocation::longitude() const {
  return longitude_;
}
inline void GeoLocation::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
}

// -------------------------------------------------------------------

// Array_SimpleValue

// optional int64 number = 1;
inline bool Array_SimpleValue::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Array_SimpleValue::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Array_SimpleValue::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Array_SimpleValue::clear_number() {
  number_ = GOOGLE_LONGLONG(0);
  clear_has_number();
}
inline ::google::protobuf::int64 Array_SimpleValue::number() const {
  return number_;
}
inline void Array_SimpleValue::set_number(::google::protobuf::int64 value) {
  set_has_number();
  number_ = value;
}

// optional double dnumber = 2;
inline bool Array_SimpleValue::has_dnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Array_SimpleValue::set_has_dnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Array_SimpleValue::clear_has_dnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Array_SimpleValue::clear_dnumber() {
  dnumber_ = 0;
  clear_has_dnumber();
}
inline double Array_SimpleValue::dnumber() const {
  return dnumber_;
}
inline void Array_SimpleValue::set_dnumber(double value) {
  set_has_dnumber();
  dnumber_ = value;
}

// optional .argos.serialization.protobuf.GeoLocation geoloc = 3;
inline bool Array_SimpleValue::has_geoloc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Array_SimpleValue::set_has_geoloc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Array_SimpleValue::clear_has_geoloc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Array_SimpleValue::clear_geoloc() {
  if (geoloc_ != NULL) geoloc_->::argos::serialization::protobuf::GeoLocation::Clear();
  clear_has_geoloc();
}
inline const ::argos::serialization::protobuf::GeoLocation& Array_SimpleValue::geoloc() const {
  return geoloc_ != NULL ? *geoloc_ : *default_instance_->geoloc_;
}
inline ::argos::serialization::protobuf::GeoLocation* Array_SimpleValue::mutable_geoloc() {
  set_has_geoloc();
  if (geoloc_ == NULL) geoloc_ = new ::argos::serialization::protobuf::GeoLocation;
  return geoloc_;
}
inline ::argos::serialization::protobuf::GeoLocation* Array_SimpleValue::release_geoloc() {
  clear_has_geoloc();
  ::argos::serialization::protobuf::GeoLocation* temp = geoloc_;
  geoloc_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Array

// repeated .argos.serialization.protobuf.Array.SimpleValue element = 1;
inline int Array::element_size() const {
  return element_.size();
}
inline void Array::clear_element() {
  element_.Clear();
}
inline const ::argos::serialization::protobuf::Array_SimpleValue& Array::element(int index) const {
  return element_.Get(index);
}
inline ::argos::serialization::protobuf::Array_SimpleValue* Array::mutable_element(int index) {
  return element_.Mutable(index);
}
inline ::argos::serialization::protobuf::Array_SimpleValue* Array::add_element() {
  return element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Array_SimpleValue >&
Array::element() const {
  return element_;
}
inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Array_SimpleValue >*
Array::mutable_element() {
  return &element_;
}

// -------------------------------------------------------------------

// Value

// optional int64 number = 1;
inline bool Value::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_number() {
  number_ = GOOGLE_LONGLONG(0);
  clear_has_number();
}
inline ::google::protobuf::int64 Value::number() const {
  return number_;
}
inline void Value::set_number(::google::protobuf::int64 value) {
  set_has_number();
  number_ = value;
}

// optional double dnumber = 2;
inline bool Value::has_dnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Value::set_has_dnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Value::clear_has_dnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Value::clear_dnumber() {
  dnumber_ = 0;
  clear_has_dnumber();
}
inline double Value::dnumber() const {
  return dnumber_;
}
inline void Value::set_dnumber(double value) {
  set_has_dnumber();
  dnumber_ = value;
}

// optional .argos.serialization.protobuf.GeoLocation geoloc = 3;
inline bool Value::has_geoloc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Value::set_has_geoloc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Value::clear_has_geoloc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Value::clear_geoloc() {
  if (geoloc_ != NULL) geoloc_->::argos::serialization::protobuf::GeoLocation::Clear();
  clear_has_geoloc();
}
inline const ::argos::serialization::protobuf::GeoLocation& Value::geoloc() const {
  return geoloc_ != NULL ? *geoloc_ : *default_instance_->geoloc_;
}
inline ::argos::serialization::protobuf::GeoLocation* Value::mutable_geoloc() {
  set_has_geoloc();
  if (geoloc_ == NULL) geoloc_ = new ::argos::serialization::protobuf::GeoLocation;
  return geoloc_;
}
inline ::argos::serialization::protobuf::GeoLocation* Value::release_geoloc() {
  clear_has_geoloc();
  ::argos::serialization::protobuf::GeoLocation* temp = geoloc_;
  geoloc_ = NULL;
  return temp;
}

// optional string str = 4;
inline bool Value::has_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Value::set_has_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Value::clear_has_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Value::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& Value::str() const {
  return *str_;
}
inline void Value::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void Value::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void Value::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* Value::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .argos.serialization.protobuf.Array array = 5;
inline bool Value::has_array() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Value::set_has_array() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Value::clear_has_array() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Value::clear_array() {
  if (array_ != NULL) array_->::argos::serialization::protobuf::Array::Clear();
  clear_has_array();
}
inline const ::argos::serialization::protobuf::Array& Value::array() const {
  return array_ != NULL ? *array_ : *default_instance_->array_;
}
inline ::argos::serialization::protobuf::Array* Value::mutable_array() {
  set_has_array();
  if (array_ == NULL) array_ = new ::argos::serialization::protobuf::Array;
  return array_;
}
inline ::argos::serialization::protobuf::Array* Value::release_array() {
  clear_has_array();
  ::argos::serialization::protobuf::Array* temp = array_;
  array_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Histogram_Entry

// repeated .argos.serialization.protobuf.Value key = 1;
inline int Histogram_Entry::key_size() const {
  return key_.size();
}
inline void Histogram_Entry::clear_key() {
  key_.Clear();
}
inline const ::argos::serialization::protobuf::Value& Histogram_Entry::key(int index) const {
  return key_.Get(index);
}
inline ::argos::serialization::protobuf::Value* Histogram_Entry::mutable_key(int index) {
  return key_.Mutable(index);
}
inline ::argos::serialization::protobuf::Value* Histogram_Entry::add_key() {
  return key_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value >&
Histogram_Entry::key() const {
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value >*
Histogram_Entry::mutable_key() {
  return &key_;
}

// required uint32 count = 2;
inline bool Histogram_Entry::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Histogram_Entry::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Histogram_Entry::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Histogram_Entry::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Histogram_Entry::count() const {
  return count_;
}
inline void Histogram_Entry::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Histogram

// required string name = 1;
inline bool Histogram::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Histogram::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Histogram::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Histogram::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Histogram::name() const {
  return *name_;
}
inline void Histogram::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Histogram::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Histogram::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Histogram::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Histogram::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .argos.serialization.protobuf.Histogram.Entry entry = 2;
inline int Histogram::entry_size() const {
  return entry_.size();
}
inline void Histogram::clear_entry() {
  entry_.Clear();
}
inline const ::argos::serialization::protobuf::Histogram_Entry& Histogram::entry(int index) const {
  return entry_.Get(index);
}
inline ::argos::serialization::protobuf::Histogram_Entry* Histogram::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::argos::serialization::protobuf::Histogram_Entry* Histogram::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram_Entry >&
Histogram::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram_Entry >*
Histogram::mutable_entry() {
  return &entry_;
}

// -------------------------------------------------------------------

// Histograms

// repeated .argos.serialization.protobuf.Histogram histogram = 1;
inline int Histograms::histogram_size() const {
  return histogram_.size();
}
inline void Histograms::clear_histogram() {
  histogram_.Clear();
}
inline const ::argos::serialization::protobuf::Histogram& Histograms::histogram(int index) const {
  return histogram_.Get(index);
}
inline ::argos::serialization::protobuf::Histogram* Histograms::mutable_histogram(int index) {
  return histogram_.Mutable(index);
}
inline ::argos::serialization::protobuf::Histogram* Histograms::add_histogram() {
  return histogram_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram >&
Histograms::histogram() const {
  return histogram_;
}
inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Histogram >*
Histograms::mutable_histogram() {
  return &histogram_;
}

// -------------------------------------------------------------------

// Document

// repeated .argos.serialization.protobuf.Value field = 1;
inline int Document::field_size() const {
  return field_.size();
}
inline void Document::clear_field() {
  field_.Clear();
}
inline const ::argos::serialization::protobuf::Value& Document::field(int index) const {
  return field_.Get(index);
}
inline ::argos::serialization::protobuf::Value* Document::mutable_field(int index) {
  return field_.Mutable(index);
}
inline ::argos::serialization::protobuf::Value* Document::add_field() {
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value >&
Document::field() const {
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Value >*
Document::mutable_field() {
  return &field_;
}

// -------------------------------------------------------------------

// Schema

// repeated string field = 1;
inline int Schema::field_size() const {
  return field_.size();
}
inline void Schema::clear_field() {
  field_.Clear();
}
inline const ::std::string& Schema::field(int index) const {
  return field_.Get(index);
}
inline ::std::string* Schema::mutable_field(int index) {
  return field_.Mutable(index);
}
inline void Schema::set_field(int index, const ::std::string& value) {
  field_.Mutable(index)->assign(value);
}
inline void Schema::set_field(int index, const char* value) {
  field_.Mutable(index)->assign(value);
}
inline void Schema::set_field(int index, const char* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Schema::add_field() {
  return field_.Add();
}
inline void Schema::add_field(const ::std::string& value) {
  field_.Add()->assign(value);
}
inline void Schema::add_field(const char* value) {
  field_.Add()->assign(value);
}
inline void Schema::add_field(const char* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Schema::field() const {
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Schema::mutable_field() {
  return &field_;
}

// -------------------------------------------------------------------

// Result

// required uint32 total = 1;
inline bool Result::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 Result::total() const {
  return total_;
}
inline void Result::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
}

// required uint32 returned = 2;
inline bool Result::has_returned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_returned() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_returned() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_returned() {
  returned_ = 0u;
  clear_has_returned();
}
inline ::google::protobuf::uint32 Result::returned() const {
  return returned_;
}
inline void Result::set_returned(::google::protobuf::uint32 value) {
  set_has_returned();
  returned_ = value;
}

// required .argos.serialization.protobuf.Schema schema = 3;
inline bool Result::has_schema() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_schema() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_schema() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_schema() {
  if (schema_ != NULL) schema_->::argos::serialization::protobuf::Schema::Clear();
  clear_has_schema();
}
inline const ::argos::serialization::protobuf::Schema& Result::schema() const {
  return schema_ != NULL ? *schema_ : *default_instance_->schema_;
}
inline ::argos::serialization::protobuf::Schema* Result::mutable_schema() {
  set_has_schema();
  if (schema_ == NULL) schema_ = new ::argos::serialization::protobuf::Schema;
  return schema_;
}
inline ::argos::serialization::protobuf::Schema* Result::release_schema() {
  clear_has_schema();
  ::argos::serialization::protobuf::Schema* temp = schema_;
  schema_ = NULL;
  return temp;
}

// repeated .argos.serialization.protobuf.Document document = 4;
inline int Result::document_size() const {
  return document_.size();
}
inline void Result::clear_document() {
  document_.Clear();
}
inline const ::argos::serialization::protobuf::Document& Result::document(int index) const {
  return document_.Get(index);
}
inline ::argos::serialization::protobuf::Document* Result::mutable_document(int index) {
  return document_.Mutable(index);
}
inline ::argos::serialization::protobuf::Document* Result::add_document() {
  return document_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Document >&
Result::document() const {
  return document_;
}
inline ::google::protobuf::RepeatedPtrField< ::argos::serialization::protobuf::Document >*
Result::mutable_document() {
  return &document_;
}

// optional .argos.serialization.protobuf.Histograms histograms = 5;
inline bool Result::has_histograms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Result::set_has_histograms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Result::clear_has_histograms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Result::clear_histograms() {
  if (histograms_ != NULL) histograms_->::argos::serialization::protobuf::Histograms::Clear();
  clear_has_histograms();
}
inline const ::argos::serialization::protobuf::Histograms& Result::histograms() const {
  return histograms_ != NULL ? *histograms_ : *default_instance_->histograms_;
}
inline ::argos::serialization::protobuf::Histograms* Result::mutable_histograms() {
  set_has_histograms();
  if (histograms_ == NULL) histograms_ = new ::argos::serialization::protobuf::Histograms;
  return histograms_;
}
inline ::argos::serialization::protobuf::Histograms* Result::release_histograms() {
  clear_has_histograms();
  ::argos::serialization::protobuf::Histograms* temp = histograms_;
  histograms_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace serialization
}  // namespace argos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_result_2eproto__INCLUDED
